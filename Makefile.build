KERNEL_VERSION = 3.10.0-327.10.1.el7.x86_64
INAUGURATOR_VERSION=$(shell python setup.py --version)

KERNEL_IMAGE_PATH=define_build_host_msg
INITRD_IMAGE_PATH=define_build_host_msg
PYTHON_DIST_FILENAME=inaugurator-${INAUGURATOR_VERSION}.linux-x86_64.tar.gz
PYTHON_DIST_LOCAL_PATH=dist/${PYTHON_DIST_FILENAME}
ifeq ($(BUILD_HOST),local)
KERNEL_IMAGE_PATH=/boot/vmlinuz-$(KERNEL_VERSION)
INITRD_IMAGE_PATH=build/inaugurator.%.initrd.dir
PYTHON_DIST_RECIPE=build_python_dist_locally
endif
ifeq ($(BUILD_HOST),docker)
KERNEL_IMAGE_PATH=docker-build/inaugurator.vmlinuz
INITRD_IMAGE_PATH=docker-build/inaugurator.%.initrd.dir
PYTHON_DIST_RECIPE=docker-dist/${PYTHON_DIST_FILENAME}
endif
DOCKER_RUN_CMD=

.PHONY: define_build_host_msg
define_build_host_msg:
	$(error Please specify the environment variable 'BUILD_HOST', to indicate where to build, as either 'local' (build images locally) or 'docker', (build images inside a docker container, which is better if the host does not have all the necessary packages).)


.PHONY: build
build: build/inaugurator.vmlinuz build/inaugurator.thin.initrd.img build/inaugurator.fat.initrd.img ${PYTHON_DIST_PATH}

.PHONY: build_python_dist_locally
build_python_dist_locally:
	python setup.py build
	python setup.py bdist
	python setup.py bdist_egg

${PYTHON_DIST_LOCAL_PATH}: ${PYTHON_DIST_RECIPE}

.PHONY: chown_stuff
chown_stuff:
	-@sudo chown -R $(USER):$(USER) docker-dist-tmp docker-build docker-dist build dist inaugurator.egg-info

docker-dist/${PYTHON_DIST_FILENAME}:
	-@mkdir $(@D)
	$(MAKE) build_container
	sudo docker run -v `pwd`:/root/inaugurator -v $(PWD)/docker-build:/root/inaugurator/build -v `pwd`/../osmosis:/root/osmosis -v $(PWD)/docker-dist:/root/inaugurator/dist build-inaugurator:$(INAUGURATOR_VERSION) dist/$(@F)
	$(MAKE) chown_stuff


build/inaugurator.vmlinuz: $(KERNEL_IMAGE_PATH)
	-@mkdir $(@D)
	cp $(KERNEL_IMAGE_PATH) $@

docker-build/%:
	-@mkdir $(@D)
	-@mkdir docker-dist-tmp
	$(MAKE) build_container
	sudo docker run -v `pwd`:/root/inaugurator -v $(PWD)/docker-build:/root/inaugurator/build -v `pwd`/../osmosis:/root/osmosis -v $(PWD)/docker-dist-tmp:/root/inaugurator/dist build-inaugurator:$(INAUGURATOR_VERSION) build/$(@F)
	$(MAKE) chown_stuff

build/inaugurator.%.initrd.img: $(INITRD_IMAGE_PATH)
	( cd $< ; find . | cpio -o -H newc ) | gzip -9 > $@.tmp
	mv $@.tmp $@

build/inaugurator.thin.initrd.dir: ${PYTHON_DIST_LOCAL_PATH} ../osmosis/dist/osmosis-1.0.linux-x86_64.tar.gz
	-@mkdir build
	-rm -fr $@.tmp $@
	mkdir $@.tmp
	echo "Installing Inaugurator"
	tar -xf $< --directory $@.tmp
	tar -xf ../osmosis/dist/osmosis-1.0.linux-x86_64.tar.gz --directory $@.tmp
	echo "Copying libraries"
	DEST=$@.tmp sh/relative_copy_glob.sh /lib64/ld*
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/python2.7/*
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/python2.7/encodings/*
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/python2.7/ctypes/*
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/python2.7/logging/*
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/python2.7/json/*
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/lib64/python2.7/lib-dynload/_ctypes.so
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/python2.7/lib-dynload/*
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/lib64/python2.7/lib-dynload/_hashlib.so
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/lib64/libudev.so.1
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib64/libnss_dns*
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/share/hwdata/pci.ids
	echo "Copying pika:"
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib/python2.7/site-packages/pika/*.py
	DEST=$@.tmp sh/relative_copy_glob.sh /usr/lib/python2.7/site-packages/pika/adapters/*.py
	echo "Copying executables"
	DEST=$@.tmp sh/relative_copy_executable.sh /bin/bash
	DEST=$@.tmp sh/relative_copy_executable.sh /bin/sh
	DEST=$@.tmp sh/relative_copy_executable.sh /bin/tftp
	DEST=$@.tmp sh/relative_copy_executable.sh /bin/python2.7
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/busybox
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/kexec
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/ifconfig
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/route
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/sfdisk
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/parted
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/mkfs.ext4
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/mkswap
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/ip
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/ethtool
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/chroot
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/dosfslabel
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/lvm
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/lvmetad
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/sbin/fsck.ext4
	DEST=$@.tmp sh/relative_copy_executable.sh /usr/bin/rsync
	DEST=$@.tmp sh/create_busybox_links.sh /usr/sbin/busybox
	cp -a ../osmosis/build/cpp/osmosis.bin $@.tmp/usr/bin/osmosis
	DEST=$@.tmp sh/relative_copy_executable_dependencies.sh $@.tmp/usr/bin/osmosis
	echo "Copying drivers"
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh ixgbe
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh virtio_blk
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh isci
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh virtio_net
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh virtio_pci
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh e1000
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh igb
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh 8139cp
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh vfat
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh ext4
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh usb_storage
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh dm_mod
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh sd_mod
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh ahci
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh isofs
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh ata_piix
	DEST=$@.tmp sh/relative_copy_glob.sh /lib/modules/$(KERNEL_VERSION)/modules.order
	DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh aacraid
	DEST=$@.tmp sh/relative_copy_glob.sh /lib/modules/$(KERNEL_VERSION)/modules.builtin
	depmod --basedir=$@.tmp $(KERNEL_VERSION)
	echo "Misc"
	DEST=$@.tmp sh/relative_copy_glob.sh etc/*
	DEST=$@.tmp sh/relative_copy_glob.sh init
	mkdir -p $@.tmp/run/udev
	mkdir -p $@.tmp/run/lvm
	mkdir $@.tmp/proc
	mkdir $@.tmp/sys
	find $@.tmp -name "*.pyo" | xargs rm -f
	mv $@.tmp $@

build/inaugurator.fat.initrd.dir: build/inaugurator.thin.initrd.dir
	echo "Creating fat image. Starting from thin image"
	cp -a $< $@.tmp
	echo "Copying drivers"
	set -e; for driver in `sh/list_storage_and_network_driver_names.sh $(KERNEL_VERSION)`; do echo "Copying $$driver"; DEST=$@.tmp KERNEL_UNAME_R=$(KERNEL_VERSION) sh/relative_copy_driver.sh $$driver; done
	depmod --basedir=$@.tmp $(KERNEL_VERSION)
	cp -a lib $@.tmp/
	mv $@.tmp $@

build/build-inaugurator.dockerfile:
	@-mkdir build
	cp docker/$(@F) $@

.PHONY: build_container
build_container: build/build-inaugurator.dockerfile
ifeq ($(BUILD_HOST),docker)
ifeq ($(shell sudo docker images | egrep -Ec "^build-inaugurator[ ]+$(INAUGURATOR_VERSION)" | xargs echo -n),0)
	$(info It seems that a build-inaugurator image for version $(INAUGURATOR_VERSION) of Inaugurator was not built. Trying to build it....)
	sudo docker build -f build/build-inaugurator.dockerfile -t build-inaugurator:$(INAUGURATOR_VERSION) build
endif
endif
